1.编写js时，考虑到对各个浏览器的兼容性，应使用能力检测，而不是版本检测。比如
if( document.body && document.body.getElementByTagName ){
 xxx
}
2.js语法：
1)区分大小写
2)单引号与双引号， 区别同 shell
3)不支持重载，相同名称的函数永远只存在一个实例
4)作用域：函数内var 声明变量表示局部变量， 非var声明表示全局变量
5)闭包：内部函数即使在外部函数执行完成并终止后，仍然可以访问其外部函数的属性，当引用一个变量或方法时，
js会沿着由对象执行路径构成的作用域链对作用域进行解析，查找变量最近定义的值。一旦找到，即使用该值。
在动态赋值给对象时，必须使用额外的函数才能维护适当的变量作用域。
6)js对象分为Object对象和Function对象，js可以通过简单的从一个对象原型向另一个对象原型复制方法而实现继承。比如
var person={};
person.getName=function(){};
person.getAge=function(){};

var employee={};
employee.getTitle=function(){};

employee.getName=person.getName;
emplyee.getAge=person.getAge;
7)window对象：
function override() {
	// Override the alert function
	var alert = function(message) {
		window.alert('overridden:' + message);
	};
	alert('alert');
	// Call the original alert from the override() scope
	window.alert('window.alert');
}
override();
// Call the alert in the window scope
alert('alert from outside');
8)var myConstructor=new Function('a','某些代码'); 以new关键字来创建函数会导致性能问题，最好还是使用function关键字.
9)js方法：
function  myConstructor(message){
	 this.myMessage=message;
	 //私有属性
	 var separator= ' -';
	 var myOwner=this;
	 
	 //私有方法
	 function alertMessage(){
		alert(myOwner.myMessage);
		}
	 alertMessage();
	 
	 //特权方法：不仅能访问私有成员，还可以被公开访问
		this.appendToMessage = function(string) {
			this.myMessage += separator + string;
			alertMessage();
		}
}
	 //公有方法：可以被公开访问，但无法访问私有成员
	 myConstructor.prototype.clearMessage = function(string) {
		this.myMessage = '';
		}
	//静态属性
	myConstructor.name='jeff';
	//静态方法
	myConstructor.alertName=function(){
	alert(this.name);
	};
私有和特权成员在函数的内部，因此它们会被带到函数的每个实例中。
静态属性和方法只存在于对象的一个具体实例，而不存在于构造函数中。
10)在脚本顶层，this引用的是window对象;在函数中，this将会解析为包含它的函数作为方法被调用时所属的对象;
在事件侦听器中，this会被解析为将事件作为方法的html元素。
function doubleCheck() {
    this.message = 'Are you sure you want to leave?';
}
doubleCheck.prototype.sayGoodbye = function() {
    return confirm(this.message);
}
initPage() {    
    var clickedLink = new doubleCheck();
    var links = document.getElementsByTagName('a');

    for (var i=0 ; i<links.length ; i++) {
        ADS.addEvent(links[i], 'click', clickedLink.sayGoodbye);
    }
}
ADS.addEvent(window,'load',initPage);
addEvent(window,'load',initPage);
上面的代码，this会被解析为<a>HTML元素，而不是clickedLink对象。通过：
clickedLink.sayGoodbye.call(window)可解决。
11)try{}catch(theException){}可处理异常
12)window对象的load事件只有在页面中所有元素加载完毕后才能调用
13)/**
 * Setup the various parts of an XMLHttpRequest Object 
 */
function getRequestObject(url,options) {
    
    // Initialize the request object
    var req = false;
    if(window.XMLHttpRequest) {
        var req = new window.XMLHttpRequest();
    } else if (window.ActiveXObject) {
        var req = new window.ActiveXObject('Microsoft.XMLHTTP');
    }
    if(!req) return false;
    
    // Define the default options
    options = options || {};
    options.method = options.method || 'GET';
    options.send = options.send || null;

    // Define the various listeners for each state of the request
    req.onreadystatechange = function() {
        switch (req.readyState) {
            case 1:
                // Loading
                if(options.loadListener) {
                    options.loadListener.apply(req,arguments);
                }
                break;
            case 2:
                // Loaded
                if(options.loadedListener) {
                    options.loadedListener.apply(req,arguments);
                }
                break;
            case 3:
                // Interactive
                if(options.ineractiveListener) {
                    options.ineractiveListener.apply(req,arguments);
                }
                break;
            case 4:
                // Complete
                // if aborted FF throws errors
                try { 
                if (req.status && req.status == 200) {
                    
                    // Specific listeners for content-type
                    // The Content-Type header can include the charset:
                    // Content-Type: text/html; charset=ISO-8859-4
                    // So we'll use a match to extract the part we need.
                    var contentType = req.getResponseHeader('Content-Type');
                    var mimeType = contentType.match(/\s*([^;]+)\s*(;|$)/i)[1];
                                        
                    switch(mimeType) {
                        case 'text/javascript':
                        case 'application/javascript':
                            // The response is JavaScript so use the 
                            // req.responseText as the argument to the callback
                            if(options.jsResponseListener) {
                                options.jsResponseListener.call(
                                    req,
                                    req.responseText
                                );
                            }
                            break;
                        case 'application/json':
                            // The response is json so parse   
                            // req.responseText using the an anonymous functions
                            // which simply returns the JSON object for the
                            // argument to the callback
                            if(options.jsonResponseListener) {
                                try {
                                    var json = parseJSON(
                                        req.responseText
                                    );
                                } catch(e) {
                                    var json = false;
                                }
                                options.jsonResponseListener.call(
                                    req,
                                    json
                                );
                            }
                            break;
                        case 'text/xml':
                        case 'application/xml':
                        case 'application/xhtml+xml':
                            // The response is XML so use the 
                            // req.responseXML as the argument to the callback
                            // This will be a Document object
                            if(options.xmlResponseListener) {
                                options.xmlResponseListener.call(
                                    req,
                                    req.responseXML
                                );
                            }
                            break;
                        case 'text/html':
                            // The response is HTML so use the 
                            // req.responseText as the argument to the callback
                            if(options.htmlResponseListener) {
                                options.htmlResponseListener.call(
                                    req,
                                    req.responseText
                                );
                            }
                            break;
                    }
                
                    // A complete listener
                    if(options.completeListener) {
                        options.completeListener.apply(req,arguments);
                    }

                } else {
                    // Response completed but there was an error
                    if(options.errorListener) {
                        options.errorListener.apply(req,arguments);
                    }
                }
                

                } catch(e) {
                    //ignore errors
                    //alert('Response Error: ' + e);
                }
                break;
        }
    };
    // Open the request
    req.open(options.method, url, true);
    // Add a special header to identify the requests
    req.setRequestHeader('X-ADS-Ajax-Request','AjaxRequest');
    return req;
}
14)